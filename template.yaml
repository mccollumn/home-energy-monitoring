AWSTemplateFormatVersion: 2010-09-09
Description: >-
  home-energy-monitoring
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  # Cognito User Pool for authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED

  # API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html

  # DynamoDB table for storing daily usage thresholds by user ID
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-ThresholdsDB"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Timestream database for storing energy usage metrics
  EnergyTimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: !Sub "${AWS::StackName}-EnergyUsageDB"

  # Timestream table for storing daily energy usage by user ID
  EnergyTimestreamTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref EnergyTimestreamDatabase
      TableName: DailyEnergyUsage
      # Adjust retention properties as needed based on performance vs cost requirements
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: "168"
        MagneticStoreRetentionPeriodInDays: "365"

  # SNS Topic for threshold notifications
  ThresholdNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-ThresholdNotifications"
      DisplayName: "Energy Usage Threshold Notifications"

  # S3 Bucket for CSV file uploads
  CSVUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebSiteBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: myS3Origin
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - US
              - CA
              - GB
              - DE
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

  ##### Lambda Functions #####

  # Authentication for signup
  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/auth-signup.signupHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user signup using Cognito
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: POST
            RestApiId: !Ref ApiGatewayApi

  # Authentication for login
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/auth-login.loginHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles user login using Cognito
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ApiGatewayApi

  # Get all DDB items
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets all items from the DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Table
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE: !Ref Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # Get DDB item by user ID
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets item by user ID from the DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Table
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE: !Ref Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # Add or update a user's threshold value in the DynamoDB table
  updateThresholdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/update-threshold.updateThresholdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Updates a user's threshold value in the DynamoDB table
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Table
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE: !Ref Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /alerts
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  # Processes CSV files uploaded to S3
  processCSVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/process-csv.processCSVHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 120
      Description: Processes CSV files uploaded to S3 and stores data in Timestream
      Policies:
        # Give Read permissions to S3
        - S3ReadPolicy:
            BucketName: !Ref CSVUploadBucket
        # Give Create/Read/Update/Delete Permissions to the Table
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
          # Give Write Permissions to Timestream
        - Statement:
            - Effect: Allow
              Action:
                - timestream:WriteRecords
                - timestream:DescribeEndpoints
              Resource: !GetAtt EnergyTimestreamTable.Arn
          # Give Publish Permissions to SNS
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref ThresholdNotificationTopic
      Environment:
        Variables:
          TABLE: !Ref Table
          IMESTREAM_DATABASE_NAME: !Ref EnergyTimestreamDatabase
          TIMESTREAM_TABLE_NAME: !Ref EnergyTimestreamTable
          SNS_TOPIC_ARN: !Ref ThresholdNotificationTopic
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref CSVUploadBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv

  # Retrieves energy usage history for a date range
  GetEnergyHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-energy-history.getEnergyHistoryHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Retrieves energy usage history for a date range
      Policies:
        # Give Read Permissions to Timestream
        - Statement:
            - Effect: Allow
              Action:
                - timestream:ReadRecords
                - timestream:DescribeEndpoints
              Resource: !GetAtt EnergyTimestreamTable.Arn
      Environment:
        Variables:
          TIMESTREAM_DATABASE_NAME: !Ref EnergyTimestreamDatabase
          TIMESTREAM_TABLE_NAME: !Ref EnergyTimestreamTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /energy/history
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # Handles requests for energy input data
  postEnergyInputFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/post-energy-input.postEnergyInputHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles POST requests for energy input data and store it in Timestream.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DynamoDB Table
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        # Give Write Permissions to Timestream
        - Statement:
            - Effect: Allow
              Action:
                - timestream:WriteRecords
                - timestream:DescribeEndpoints
              Resource: !GetAtt EnergyTimestreamTable.Arn
        # Give Publish Permissions to SNS
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref ThresholdNotificationTopic
      Environment:
        Variables:
          TABLE: !Ref Table
          ENDPOINT_OVERRIDE: ""
          TIMESTREAM_DATABASE_NAME: !Ref EnergyTimestreamDatabase
          TIMESTREAM_TABLE_NAME: !Ref EnergyTimestreamTable
          SNS_TOPIC_ARN: !Ref ThresholdNotificationTopic
      Events:
        Api:
          Type: Api
          Properties:
            Path: /energy/input
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  # Copy files from presigned URLs to CSVUploadBucket
  PostEnergyUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/post-energy-upload.postEnergyUploadHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 30
      Description: Copies files from presigned URLs to CSVUploadBucket
      Policies:
        # Give Write permissions to S3 bucket
        - S3WritePolicy:
            BucketName: !Ref CSVUploadBucket
      Environment:
        Variables:
          # Make bucket name accessible as environment variable
          CSV_BUCKET: !Ref CSVUploadBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /energy/upload
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

##### Outputs #####

Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CognitoUserPoolId:
    Description: Cognito User Pool ID for user authentication
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID for user authentication
    Value: !Ref CognitoUserPoolClient
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
  CSVUploadBucketName:
    Description: S3 Bucket for CSV file uploads
    Value: !Ref CSVUploadBucket

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
